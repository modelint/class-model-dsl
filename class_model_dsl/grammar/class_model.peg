// Model Markdown Arpeggio Clean Peg Grammar

// For now we concentrate on drawing a class diagram, so only class and relationship
// content is here for now

// Attribute and method structure is not parsed since it is simply rendered without
// further interpretation on a class diagram

//ig_line = r'\s*(///.*)?'


// Subsystem
// The only thing required is a subsystem name and a set of possibly empty classes
subsystem = metadata? domain_header subsystem_header class_set rel_section? EOF
domain_header = "domain" sp domain_name domain_alias nl  // Declares the name of the domain
domain_name = icaps_name
domain_alias = ',' sp acword
subsystem_header = "subsystem" sp subsystem_name subsystem_alias sp num_range nl  // Declares the name of the subsystem
subsystem_name = icaps_name
subsystem_alias = ',' sp acword
num_range = ordinal '-' ordinal

// Metadata
metadata = metadata_header data_item*
metadata_header = "metadata" nl // Metadata header
data_item = indent item_name sp* (resource_item / text_item) nl // Metadata item
item_name = iword delim word* // Meta data item starts with initial cap
resource_item = '>' sp* word (delim word)* // Resource is a name
text_item = ':' sp* r'.*' // Field content can be any text

// Classes
class_set = class_block*  // All classes in the subsystem
class_block = class_header attr_block
class_header = "class" sp class_name class_alias? import? nl
class_name = icaps_name
class_alias = ',' sp+ acword
import = sp+ '<import:' icaps_name '>' // Import marker and name of origin subsystem
class_name = icaps_name

// Attributes
attr_block = attr_header attribute+ block_end // A set of attributes
attr_header = "attributes" nl
attribute = indent attr_name (' : ' type_name)? (sp attr_tags)? nl
attr_name = icaps_name
type_name = icaps_name
attr_tags = '{' attr_tag (',' sp attr_tag )* '}' // {I, I2, R29c} for example
attr_tag = itag / rtag
itag = 'I' ordinal? // Identifier number, both I and I1 mean the same thing
rtag = 'R' ordinal 'c'? // Relationship number and optional c constraint signifier

// Relationships
rel_section = relationship_header rel*  // All relationships in the subsystem
relationship_header = "relationships" nl
rel = rname (binary_rel / gen_rel) block_end  // A rel is either a binary association or a generalization
rname = indent rnum nl  // Name of a rel is its rnum
binary_rel = t_side p_side assoc_class? // Both sides
t_side = rel_side
p_side = rel_side
rel_side = indent phrase "," sp mult sp+ icaps_name nl  // One side of a binary association
assoc_class = indent ('1' / 'M') sp+ icaps_name nl   // Association class
gen_rel = superclass subclass subclass+ // A generalization relationship
superclass = indent icaps_name sp? "+" nl // A superclass class name
subclass = indent indent icaps_name nl  // A subclass class name

// Words and delimiters
//body_line = indent r'.*' nl // An unstructured line of text
word = iword / lword
icaps_name = iword (delim word)*  // A name using initial caps only
class_alias = ',' sp+ acword
acword = r'[A-Z][A-Z0-9_]*' // All caps words for class abbreviations
iword = r'[A-Z][A-Za-z0-9]*' // Initial cap word (used in Class and Subsystem names)
lword = r'[a-z][a-z]*' // Lower case only word (used in relationship phrase)
ordinal = r'[1-9][0-9]*' // A counting number starting at 1
phrase = lword (delim lword)*  // Relationship phrase
mult = r'[1M]c?' // Binary relationship multiplicity, Shlaer-Mellor notation
rnum = r'O?R[1-9][0-9]*' // Relationship number
delim = r'[ _]' // Delimiter used inside of names
indent = "    "  // Need indent for clarity and to signal unstructured lines of text
block_end = "--" nl?  // Signifies end of a block (within section)
nl = "\n" // New line
sp = " "